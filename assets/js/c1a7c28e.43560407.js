"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[900365],{15680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>d});var n=t(296540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),g=o,d=p["".concat(s,".").concat(g)]||p[g]||y[g]||a;return t?n.createElement(d,i(i({ref:r},u),{},{components:t})):n.createElement(d,i({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},268606:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(58168),o=(t(296540),t(15680));const a={title:"Hybrid Storage",language:"en"},i=void 0,l={unversionedId:"table-design/row-store",id:"version-2.0/table-design/row-store",title:"Hybrid Storage",description:"\x3c!--",source:"@site/versioned_docs/version-2.0/table-design/row-store.md",sourceDirName:"table-design",slug:"/table-design/row-store",permalink:"/docs/2.0/table-design/row-store",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Hybrid Storage",language:"en"},sidebar:"docs",previous:{title:"Usage Notes",permalink:"/docs/2.0/table-design/data-model/tips"},next:{title:"Data Partitioning",permalink:"/docs/2.0/table-design/data-partition"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2}],u={toc:c},p="wrapper";function y(e){let{components:r,...t}=e;return(0,o.yg)(p,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"hybrid-storage"},"Hybrid Storage"),(0,o.yg)("p",null,"Doris defaults to columnar storage, where each column is stored contiguously. Columnar storage offers excellent performance for analytical scenarios (such as aggregation, filtering, sorting, etc.), as it only reads the necessary columns, reducing unnecessary IO. However, in point query scenarios (such as ",(0,o.yg)("inlineCode",{parentName:"p"},"SELECT *"),"), all columns need to be read, requiring an IO operation for each column, which can lead to IOPS becoming a bottleneck, especially for wide tables with many columns (e.g., hundreds of columns)."),(0,o.yg)("p",null,"To address the IOPS bottleneck in point query scenarios, starting from version 2.0.0, Doris supports hybrid storage. When users create tables, they can specify whether to enable row storage. With row storage enabled, each row only requires one IO operation for point queries (such as ",(0,o.yg)("inlineCode",{parentName:"p"},"SELECT *"),"), significantly improving performance."),(0,o.yg)("h2",{id:"syntax"},"Syntax"),(0,o.yg)("p",null,"When creating a table, specify whether to enable row storage, defaults to false (not enabled)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'"store_row_column" = "true"\n')),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("p",null,"The example below creates an 8-column table, where row storage is enabled."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'CREATE TABLE `tbl_point_query` (\n     `key` int(11) NULL,\n     `v1` decimal(27, 9) NULL,\n     `v2` varchar(30) NULL,\n     `v3` varchar(30) NULL,\n     `v4` date NULL,\n     `v5` datetime NULL,\n     `v6` float NULL,\n     `v7` datev2 NULL\n) ENGINE=OLAP\nUNIQUE KEY(`key`)\nCOMMENT \'OLAP\'\nDISTRIBUTED BY HASH(`key`) BUCKETS 1\nPROPERTIES (\n     "enable_unique_key_merge_on_write" = "true",\n     "light_schema_change" = "true",\n     "store_row_column" = "true"\n);\n')),(0,o.yg)("p",null,"For more information on point query usage, please refer to ",(0,o.yg)("a",{parentName:"p",href:"../query/high-concurrent-point-query"},"High-Concurrent Point Query"),"."))}y.isMDXComponent=!0}}]);